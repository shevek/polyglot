Package org.anarres.polyglot.test.calculator;

Externals

	j_int = 'int' ;

Helpers

	letter = ['a'..'z'] ;

	digit = ['0'..'9'] ;

Tokens

	identifier = letter+ ;
	integer_constant = digit+ ;

	tok_add = '+' ;
	tok_sub = '-' ;
	tok_mul = '*' ;
	tok_div = '/' ;
	tok_rem = '%' ;

	tok_lpar = '(' ;
	tok_rpar = ')' ;
	tok_comma = ',' ;

	blank = ' ';

Ignored Tokens
	blank;

Productions

	expression { -> expression } =
		additive_expression
			{ -> additive_expression.expression } ;

	expression_list { -> expression* } =
		[e]:expression { -> [e] } |
		[h]:expression_list tok_comma [t]:expression { -> [h, t] } ;

	additive_expression { -> expression } =
		{add} additive_expression tok_add multiplicative_expression
			{ -> New expression.add(additive_expression, multiplicative_expression) } |
		{sub} additive_expression tok_sub multiplicative_expression
			{ -> New expression.sub(additive_expression, multiplicative_expression) } |
		{no} multiplicative_expression
			{ -> multiplicative_expression.expression } ;

	multiplicative_expression { -> expression } =
		{mul} multiplicative_expression tok_mul primary_expression
			{ -> New expression.mul(multiplicative_expression, primary_expression) } |
		{div} multiplicative_expression tok_div primary_expression
			{ -> New expression.div(multiplicative_expression, primary_expression) } |
		{rem} multiplicative_expression tok_rem primary_expression
			{ -> New expression.rem(multiplicative_expression, primary_expression) } |
		{no} primary_expression
			{ -> primary_expression.expression } ;

	primary_expression { -> expression } =
		integer_constant
			{ -> New expression.constant(integer_constant) } |
		identifier tok_lpar [a]:expression_list tok_rpar
			{ -> New expression.function(identifier, [a]) } ;

Abstract Syntax Tree

	/** An integer arithmetic expression. */
	expression =
		/** An addition expression. */
		{add} [left]:expression [right]:expression |
		/** A subtraction expression. */
		{sub} [left]:expression [right]:expression |
		/** A multiplication expression. */
		{mul} [left]:expression [right]:expression |
		/** A division expression. */
		{div} [left]:expression [right]:expression |
		/** A remainder expression. */
		{rem} [left]:expression [right]:expression |
		{function} [name]:identifier [arguments]:expression* |
		/** An integer constant expression. */
		{constant} integer_constant [value]:j_int ;

