/* ${header} */
package ${grammar.package.packageName}.lexer;

import java.io.DataInputStream;
import java.io.IOException;
import java.io.PushbackReader;
import java.io.Reader;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnegative;
import javax.annotation.Nonnull;
import ${grammar.package.packageName}.node.*;

/**
 * The default concrete lexer implementation.
 */
public class Lexer extends AbstractLexer {

    protected final PushbackReader in;

    private int offset;
    private int line;
    private int column;
    private boolean cr;
    private final StringBuilder text = new StringBuilder();

    public Lexer(@Nonnull PushbackReader in) {
        this.in = in;
    }

    @Nonnull
    private static PushbackReader toPushbackReader(@Nonnull Reader in, @Nonnegative int lookahead_length) {
        if (in instanceof PushbackReader)
            return (PushbackReader) in;
        return new PushbackReader(in, lookahead_length);
    }

    public Lexer(@Nonnull Reader in, @Nonnegative int lookahead_length) {
        this(toPushbackReader(in, lookahead_length));
    }

    @Override
    protected Token getToken() throws IOException, LexerException {
        int dfa_state = 0;

        int start_offset = this.offset;
        int start_line = this.line;
        int start_column = this.column;

        int accept_token = 0;
        int accept_offset = -1;
        int accept_line = -1;
        int accept_column = -1;
        int accept_length = -1;

        int[][] gotoTableEntry = AbstractLexer.gotoTable[this.state.id()];
        int[] acceptTableEntry = AbstractLexer.acceptTable[this.state.id()];
        this.text.setLength(0);

        for (;;) {
            int c = in.read();

            CHAR: {
                switch (c) {
                    case 10:
                        this.offset++;
                        if (this.cr) {
                            this.cr = false;
                        } else {
                            this.line++;
                            this.column = 0;
                        }
                        break;
                    case 13:
                        this.offset++;
                        this.line++;
                        this.column = 0;
                        this.cr = true;
                        break;
                    case -1:
                        dfa_state = -1;
                        break CHAR;
                    default:
                        this.offset++;
                        this.column++;
                        this.cr = false;
                        break;
                }

                this.text.append((char) c);

                int[] gotoTableItem = gotoTableEntry[dfa_state];
                dfa_state = search(gotoTableItem, c);
            }

            if (dfa_state >= 0) {
                // If there was a valid transition found on this character.
                int acceptTableItem = acceptTableEntry[dfa_state];
                if (acceptTableItem != 0) {
                    accept_token = acceptTableItem;
                    accept_length = this.text.length();
                    accept_offset = this.offset;
                    accept_line = this.line;
                    accept_column = this.column;
                }
            }
            else {
                // If there was no valid transition found, then we accept from the last accept state.
                switch (accept_token) {

#foreach ($token in ${grammar.tokens})
                    case ${token.index}: {
#if ($token.fixed)
                        Token token = new ${token.javaTypeName}(
                            start_offset,
                            start_line + 1,
                            start_column + 1);
#else## token not fixed
                        Token token = new ${token.javaTypeName}(
                            getText(accept_length),
                            start_offset,
                            start_line + 1,
                            start_column + 1);
#end## token.fixed
                        unread_except(accept_length);
                        accept_at(accept_offset, accept_line, accept_column);
#if ($token.transitional)

                        switch (state) {
#foreach ($transition in $token.transitions)
                            case ${transition.key.name}: state = State.${transition.value.name}; break;
## TODO: Have a default -> IllegalStateException here? Would we blow up the method limit?
#end##foreach transition
                            default: break;
                        }
#end##token.transitional
                        return token;
                    }
#end##foreach token
                    case 0: {
                        if (this.text.length() > 0) {
                            throw new LexerException(
                                new InvalidToken(this.text.substring(0, 1), start_offset, start_line + 1, start_column + 1),
                                // "[" + (start_line + 1) + "," + (start_column + 1) + "] " +
                                "Unknown token: " + this.text);
                        }

                        return new EOF(
                            start_offset,
                            start_line + 1,
                            start_column + 1);
                    }

                    default:
                        throw new IllegalStateException("Internal failure: accept_token=" + accept_token + ", but no handler found.");
                }   // switch (accept_token)
            }
        }
    }

    private void unread_except(/* @Nonnegative */ int acceptLength) throws IOException {
        int length = this.text.length();
        for (int i = length - 1; i >= acceptLength; i--) {
            this.in.unread(this.text.charAt(i));
        }
    }

    private void accept_at(int offset, int line, int column) {
        this.offset = offset;
        this.line = line;
        this.column = column;
    }

##    protected void unread(@Nonnull Token token) throws IOException {
##        String text = token.getText();
##        int length = text.length();
##        for (int i = length - 1; i >= 0; i--)
##            this.in.unread(text.charAt(i));
##        this.offset = token.getOffset();
##        this.line = token.getLine() - 1;
##        this.column = token.getColumn() - 1;
##    }

    @Nonnull
    private String getText(/* @Nonnegative */ int acceptLength) {
        return this.text.substring(0, acceptLength);
    }
}
