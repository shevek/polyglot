/* ${header} */
package ${grammar.package.packageName}.analysis;

import java.util.ArrayList;
import java.util.List;
import javax.annotation.Nonnull;
import ${grammar.package.packageName}.node.*;

/**
 * An AnalysisAdapter which walks the tree depth first, in a left-to-right manner.
 *
 * You may prefer to use {@link DepthFirstVisitor} for new code,
 * as it has the ability to pass and return state on the stack, rather
 * than using a separate state store.
 */
${generated}
public class DepthFirstAdapter extends AnalysisAdapter {

	public void defaultIn(@Nonnull Node node) {
	}

	public void defaultOut(@Nonnull Node node) {
	}

#foreach ($parserMachine in $parserMachines)
	public void in${parserMachine.startClassName}(@Nonnull ${parserMachine.startClassName} node) {
		defaultIn(node);
	}

	public void out${parserMachine.startClassName}(@Nonnull ${parserMachine.startClassName} node) {
		defaultOut(node);
	}

	@Override
	public void case${parserMachine.startClassName}(${parserMachine.startClassName} node) {
		in${parserMachine.startClassName}(node);
		applyTo(node.get${parserMachine.astProductionRoot.javaMethodName}());
		applyTo(node.getEOF());
		out${parserMachine.startClassName}(node);
	}

#end
#foreach ($production in $grammar.astProductions)
	// Production: $production
#foreach ($alternative in $production.alternatives)
	// Alternative: $alternative
	public void in${alternative.javaMethodName}(@Nonnull ${alternative.javaTypeName} node) {
		defaultIn(node);
	}

	public void out${alternative.javaMethodName}(@Nonnull ${alternative.javaTypeName} node) {
		defaultOut(node);
	}

	@Override
	public void case${alternative.javaMethodName}(${alternative.javaTypeName} node) {
		in${alternative.javaMethodName}(node);

#foreach ($element in $alternative.elements)
#if ($element.list)
		applyToCopyOf(node.get${element.javaMethodName}());
#else##list
		applyTo(node.get${element.javaMethodName}());
#end##list
#end##foreach element

#foreach ($external in $alternative.externals)
		// External $external.name
#end##foreach alternative.externals

		out${alternative.javaMethodName}(node);
	}

#end
#end

}
