/* ${header} */
package ${grammar.package.packageName}.analysis;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnegative;
import javax.annotation.Nonnull;
import ${grammar.package.packageName}.node.*;

/**
 * A default implementation of {@link Visitor} which returns null for all nodes.
 *
 * @param <I> The type of the auxiliary argument to the visitor methods; use Void and pass null if not required.
 * @param <O> The return type of the visitor methods; use Void and return null if not required.
 * @param <X> The common supertype of checked exceptions thrown by the visitor methods; use RuntimeException if not required.
 *
 * @see Visitor
 * @see AbstractVisitorAdapter
 */
public class VisitorAdapter<I, O, X extends Exception> extends AbstractVisitorAdapter<I, O, X> {

#foreach ($production in $grammar.astProductions)
#foreach ($alternative in $production.alternatives)
    /**
     * By default, calls {@link ${esc.h}visitDefault(Node, Object)}.
     *
     * @return The return value of {@link ${esc.h}visitDefault(Node, Object)}.
     */
    @Override
    public O visit${alternative.javaMethodName}(@Nonnull ${alternative.javaTypeName} node, I input) throws X {
        return visitDefault(node, input);
    }

#end
#end
}
