/* ${header} */
package ${grammar.package.packageName}.node;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import java.util.List;

#parse("org/anarres/polyglot/output/java/macros.vm")

#if ($production.javadocComment)
$production.javadocComment
#else
## No default javadoc - (a) information leakage, (b) javadoc performance sucks.
## /** ${production} */
/** The abstract superclass of all ${production.name} alternatives. */
#end
#annotate($production)
public abstract class ${production.javaTypeName}
        extends $helper.getSuperClass($production, "Node")
        implements IProduction
#implement($production)
        {

    /** Default nullary constructor. */
    public ${production.javaTypeName}() {
    }

#foreach ($element in $production.abstractElements)
#if ($element.list)

    $!element.javadocComment
    @Nonnull
#annotate($element)
    public abstract List<${element.javaTypeName}> get${element.javaMethodName}();

    $!element.javadocComment
    public abstract void set${element.javaMethodName}(#if($element.nullable)@CheckForNull#{else}@Nonnull#{end} Iterable<? extends ${element.javaTypeName}> list);
#else##$element.list

    $!element.javadocComment
#if ($element.nullable)
    @CheckForNull
#else
    @Nonnull
#end
#annotate($element)
    public abstract ${element.javaTypeName} get${element.javaMethodName}();

    $!element.javadocComment
    public abstract void set${element.javaMethodName}(#{if}($element.nullable)@CheckForNull#{else}@Nonnull#{end} ${element.javaTypeName} value);
#end##$element.list
#end##$element

    @Override
    public abstract ${production.javaTypeName} clone();

    @Nonnull
    public abstract ${production.javaTypeName} clone(@Nonnull CloneListener listener);
}
