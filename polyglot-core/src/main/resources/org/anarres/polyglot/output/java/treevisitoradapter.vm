/* ${header} */
package ${package}.analysis;

import java.util.ArrayList;
import java.util.List;
import javax.annotation.Nonnegative;
import javax.annotation.Nonnull;
import ${package}.node.*;

/**
 * A {@link Visitor} which supports walking the tree.
 *
 * @param <I> The type of the auxiliary argument to the visitor methods; use Void and pass null if not required.
 * @param <O> The return type of the visitor methods; use Void and return null if not required.
 * @param <X> The common supertype of checked exceptions thrown by the visitor methods; use RuntimeException if not required.
 *
 * @see VisitorAdapter
 * @see AbstractVisitorAdapter
 * @see DepthFirstVisitor
 */
public class TreeVisitorAdapter<I, O, X extends Exception> extends VisitorAdapter<I, O, X> {

## Externals could use ialternative rather than Node.
    public O inExternals(@Nonnull Node node, I input, @Nonnegative int externalCount) {
        return null;
    }

    public O outExternals(@Nonnull Node node, I input, @Nonnegative int externalCount) {
        return null;
    }
#foreach ($externalType in $helper.externalTypes)

    /**
     * A default handler for externals which can losslessly be converted to ${externalType}.
     *
     * By default, returns null.
     *
     * @return null
     */
    public O visitExternal${helper.getExternalMethodName($externalType)}(@Nonnull Node node, I input, @Nonnull String name, $externalType value) {
        return null;
    }
#end

    public O inDefault(@Nonnull Node node, I input) throws X {
        return null;
    }

    public O outDefault(@Nonnull Node node, I input) throws X {
        return null;
    }

#foreach ($parserMachine in $parserMachines)
    public O in${parserMachine.startClassName}(@Nonnull ${parserMachine.startClassName} node, I input) throws X {
        return inDefault(node, input);
    }

    public O out${parserMachine.startClassName}(@Nonnull ${parserMachine.startClassName} node, I input) throws X {
        return outDefault(node, input);
    }

#end
#foreach ($production in $grammar.astProductions)

    // Production: $production
#foreach ($alternative in $production.alternatives)

    // Alternative: $alternative
    public O in${alternative.javaMethodName}(@Nonnull ${alternative.javaTypeName} node, I input) throws X {
        return inDefault(node, input);
    }

    public O out${alternative.javaMethodName}(@Nonnull ${alternative.javaTypeName} node, I input) throws X {
        return outDefault(node, input);
    }

#foreach ($external in $alternative.externals)
    /** Handles the external '${alternative.name}.${external.name}'. */
    public O visitExternal${alternative.javaMethodName}${external.javaMethodName}(@Nonnull ${alternative.javaTypeName} node, I input, #if($external.list)List<${external.javaTypeName}>#{else}${external.javaTypeName}#{end} value) {
        return visitExternal$helper.getExternalMethodName($external.javaTypeName)(node, input, "${external.name}", value);
    }
#end##external
#end##alternative
#end##production

}
