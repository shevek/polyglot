/* ${header} */
package ${grammar.package.packageName}.analysis;

import javax.annotation.Nonnull;
import ${grammar.package.packageName}.node.*;

/**
 * An advanced visitor interface.
 *
 * This interface has a method per token and alternative in the grammar.
 *
 * @param <I> The type of the auxiliary argument to the visitor methods; use Void and pass null if not required.
 * @param <O> The return type of the visitor methods; use Void and return null if not required.
 * @param <X> The common supertype of checked exceptions thrown by the visitor methods; use RuntimeException if not required.
 *
 * @see AbstractVisitorAdapter
 * @see VisitorAdapter
 */
${generated}
public interface Visitor<I, O, X extends Exception> {
#foreach ($token in $grammar.tokensAlphabetical)
	public O visit${token.javaMethodName}(@Nonnull ${token.javaTypeName} node, I input) throws X;
#end
#foreach ($parserMachine in $parserMachines)
	public O visit${parserMachine.startClassName}(@Nonnull ${parserMachine.startClassName} node, I input) throws X;
#end
#foreach ($production in $grammar.astProductionsAlphabetical)
#foreach ($alternative in $production.alternatives)
	public O visit${alternative.javaMethodName}(@Nonnull ${alternative.javaTypeName} node, I input) throws X;
#end
#end
	public O visitEOF(@Nonnull EOF node, I input) throws X;
	public O visitInvalidToken(@Nonnull InvalidToken node, I input) throws X;
}
