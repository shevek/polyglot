/* ${header} */
package ${grammar.package.packageName}.node;

import java.util.ArrayList;
import java.util.List;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import ${package}.analysis.Visitor;

#parse("org/anarres/polyglot/output/java/macros.vm")
#import($production)
#import($alternative)

#if ($helper.isOption("CG_LISTREFS_MUTABLE"))
#set($listArgOf = "List<")
#else##CG_FINAL
#set($listArgOf = "Iterable<? extends ")
#end##CG_FINAL
#if ($helper.isOption("CG_APIDOC"))
#if ($alternative.javadocComment)
$alternative.javadocComment
#elseif ($alternative.production.javadocComment)
$production.javadocComment
#else
## No default javadoc - (a) information leakage, (b) javadoc performance sucks.
## /** ${alternative} */
#end
#end##CG_APIDOC
#annotate($production, 'javaClassAnnotation')
#annotate($alternative, 'javaClassAnnotation')
## If we write a method in a superclass, the bean method in here
## doesn't know that it's an override, and errorprone complains.
@SuppressWarnings("MissingOverride")
public class ${alternative.javaTypeName}
		extends $helper.getSuperClass($alternative, ${production.javaTypeName})
		implements IAlternative
#implement($alternative)
		{

	public static final ${alternative.javaTypeName}[] EMPTY_ARRAY = new ${alternative.javaTypeName}[0];

## This deliberately preserves order, so that if we're building e.g. an XML serializer,
## we don't reorder the elements from the order the user specified. Methods below are
## still reordered, but if we use CG_LISTREFS_MUTABLE and annotate fields, it works fine.
#foreach ($element in $alternative.declaredElements)
#annotate($element, 'javaFieldAnnotation')
#if ($element.list)
#if ($element.isExternal() || $helper.isOption("CG_LISTREFS_MUTABLE"))
	private List<${element.javaTypeName}> _${element.javaFieldName}_;
#else##CG_LISTREFS_MUTABLE
	private final List<${element.javaTypeName}> _${element.javaFieldName}_ = new ArrayList<${element.javaTypeName}>();
#end
#else##if element.list
	private ${element.javaTypeName} _${element.javaFieldName}_;
#end##if element.list
#end##foreach alternative.elements

	/**
	 * Constructs a new ${alternative.javaTypeName} and sets all elements.
#foreach ($element in $alternative.elements)
	 * @param _${element.javaFieldName}_ See {@link #get${element.javaMethodName}()}.
#end
	 */
	public ${alternative.javaTypeName}(
#foreach ($element in $alternative.elements)
		#if($element.nullable)@CheckForNull#{else}@Nonnull#{end}##
#if ($element.list)
 $listArgOf${element.javaTypeName}> _${element.javaFieldName}_#if($velocityHasNext),#end

#else##if element.list
 ${element.javaTypeName} _${element.javaFieldName}_#if($velocityHasNext),#end

#end##if element.list
#end##foreach alternative.elements
		) {
#foreach ($element in $alternative.elements)
		set${element.javaMethodName}(_${element.javaFieldName}_);
#end##foreach alternative.elements
	}

#if (!$alternative.externals.empty)
	/**
	 * Constructs a new ${alternative.javaTypeName} and sets all elements and externals.
#foreach ($element in $alternative.elements)
	 * @param _${element.javaFieldName}_ See {@link #get${element.javaMethodName}()}.
#end
#foreach ($external in $alternative.externals)
	 * @param _${external.javaFieldName}_ See {@link #get${external.javaMethodName}()}.
#end
	 */
	public ${alternative.javaTypeName}(
#foreach ($element in $alternative.elements)
		#if($element.nullable)@CheckForNull#{else}@Nonnull#{end}##
#if ($element.list)
 $listArgOf${element.javaTypeName}> _${element.javaFieldName}_,
#else##if element.list
 ${element.javaTypeName} _${element.javaFieldName}_,
#end##if element.list
#end##foreach alternative.elements
#foreach ($external in $alternative.externals)
		#if($external.nullable)@CheckForNull#{else}@Nonnull#{end}##
#if ($external.list)
 List<${external.javaTypeName}> _${external.javaFieldName}_#if($velocityHasNext),#end

#else##if external.list
 ${external.javaTypeName} _${external.javaFieldName}_#if($velocityHasNext),#end

#end##if external.list
#end##foreach alternative.externals
		) {
#foreach ($element in $alternative.elements)
		set${element.javaMethodName}(_${element.javaFieldName}_);
#end##foreach alternative.elements
#foreach ($external in $alternative.externals)
		set${external.javaMethodName}(_${external.javaFieldName}_);
#end##foreach alternative.externals
	}
#end##!externals.empty

#if (!$alternative.elements.empty)
	/** Constructs a new ${alternative.javaTypeName} without setting any fields. */
	public ${alternative.javaTypeName}() {
	}
#end

	// Elements
#foreach ($element in $alternative.elements)
#if ($element.list)

	$!element.javadocComment
#if ($helper.isOption("CG_LISTREFS_MUTABLE"))
	@CheckForNull
#else##CG_LISTREFS_MUTABLE
	@Nonnull
#end##CG_LISTREFS_MUTABLE
#annotate($element, 'javaGetAnnotation')
	public List<${element.javaTypeName}> get${element.javaMethodName}() {
		return this._${element.javaFieldName}_;
	}

	$!element.javadocComment
#annotate($element, 'javaSetAnnotation')
	public void set${element.javaMethodName}(#if($element.nullable)@CheckForNull#{else}@Nonnull#{end} $listArgOf${element.javaTypeName}> list) {
## Clear the old list.
## If we're CG_LISTREFS_MUTABLE then the existing list might be null.
#if ($helper.isOption("CG_PARENT"))
		removeAllFromParent(this._${element.javaFieldName}_, this);
#end##CG_PARENT
#if ($helper.isOption("CG_LISTREFS_MUTABLE"))
		this._${element.javaFieldName}_ = list;
#else##CG_LISTREFS_MUTABLE
		this._${element.javaFieldName}_.clear();
#end##CG_LISTREFS_MUTABLE

		if (list != null) {
			for (${element.javaTypeName} e : list) {
#if ($helper.isOption("CG_PARENT"))
				moveToParent(e, this);
#end##CG_PARENT
#if (!$helper.isOption("CG_LISTREFS_MUTABLE"))
				this._${element.javaFieldName}_.add(e);
#end##CG_LISTREFS_MUTABLE
			}
		}
	}
#else##if element.list

	$!element.javadocComment
#if ($element.nullable)
	@CheckForNull
#else
	@Nonnull
#end
#annotate($element, 'javaGetAnnotation')
	public ${element.javaTypeName} get${element.javaMethodName}() {
		return this._${element.javaFieldName}_;
	}

	$!element.javadocComment
#annotate($element, 'javaSetAnnotation')
	public void set${element.javaMethodName}(#{if}($element.nullable)@CheckForNull#{else}@Nonnull#{end} ${element.javaTypeName} node) {
#if ($helper.isOption("CG_PARENT"))
		removeFromParent(this._${element.javaFieldName}_, this);
		moveToParent(node, this);
#end##CG_PARENT
		this._${element.javaFieldName}_ = node;
	}
#end##if element.list

	@Nonnull
#annotate($element, 'javaWithAnnotation')
	public ${alternative.javaTypeName} with${element.javaMethodName}(#{if}($element.nullable)@CheckForNull#{else}@Nonnull#{end} #if($element.list)$listArgOf${element.javaTypeName}>#{else}${element.javaTypeName}#{end} value) {
		set${element.javaMethodName}(value);
		return this;
	}
#end##foreach alternative.elements

	// Externals
#foreach ($external in $alternative.externals)

	$!external.javadocComment
#if ($external.nullable)
	@CheckForNull
#elseif (!$external.symbol.primitive)
	@Nonnull
#end
#annotate($external, 'javaGetAnnotation')
	public #if($external.list)List<${external.javaTypeName}>#{else}${external.javaTypeName}#{end} get${external.javaMethodName}() {
		return this._${external.javaFieldName}_;
	}

	$!external.javadocComment
#annotate($external, 'javaSetAnnotation')
	public void set${external.javaMethodName}(#{if}($external.nullable)@CheckForNull#{elseif}(!$external.symbol.primitive)@Nonnull#{end} #if($external.list)List<${external.javaTypeName}>#{else}${external.javaTypeName}#{end} value) {
		this._${external.javaFieldName}_ = value;
	}

	@Nonnull
#annotate($external, 'javaWithAnnotation')
	public ${alternative.javaTypeName} with${external.javaMethodName}(#{if}($external.nullable)@CheckForNull#{elseif}(!$external.symbol.primitive)@Nonnull#{end} #if($external.list)List<${external.javaTypeName}>#{else}${external.javaTypeName}#{end} value) {
		set${external.javaMethodName}(value);
		return this;
	}
#end##foreach alternative.external

	@Override
	public void removeChild(Node child) {
#foreach ($element in $alternative.elements)
#if ($element.list)
#if ($helper.isOption("CG_LISTREFS_MUTABLE"))
		if (this._${element.javaFieldName}_ != null) {
#else##CG_LISTREFS_MUTABLE
		{
#end##CG_LISTREFS_MUTABLE
			if (this._${element.javaFieldName}_.remove(child))
				return;
		}
#else##if element.list
		if (this._${element.javaFieldName}_ == child) {
			this._${element.javaFieldName}_ = null;
			return;
		}
#end##if element.list
#end##foreach alternative.elements

		throw new IllegalArgumentException("Not a child.");
	}

	@Override
	public void replaceChild(Node prev, Node repl) {
#foreach ($element in $alternative.elements)
#if ($element.list)
		if (replaceChildInList(this._${element.javaFieldName}_, prev, repl, this))
			return;

#else##if element.list
		if (this._${element.javaFieldName}_ == prev) {
			set${element.javaMethodName}((${element.javaTypeName}) repl);
			return;
		}

#end##if element.list
#end##foreach alternative.elements

		throw new IllegalArgumentException("Not a child.");
	}

	@Override
#if ($helper.isOption("CG_FINDBUGS"))
	@edu.umd.cs.findbugs.annotations.SuppressFBWarnings("CN_IDIOM_NO_SUPER_CALL")
#end
	public ${alternative.javaTypeName} clone() {
		return clone(CloneListener.NONE);
	}

	@Override
	public ${alternative.javaTypeName} clone(CloneListener listener) {
		${alternative.javaTypeName} out = new ${alternative.javaTypeName}(
#foreach ($element in $alternative.elements)
#if ($element.list)
			cloneList(listener, get${element.javaMethodName}())#if($velocityHasNext),#end

#else##if element.list
			cloneNode(listener, get${element.javaMethodName}())#if($velocityHasNext),#end

#end##if element.list
#end##foreach alternative.elements
		);
#foreach ($external in $alternative.externals)
		out.set${external.javaMethodName}(get${external.javaMethodName}());
#end##foreach alternative.externals
		listener.fireNodeCloned(this, out);
		return out;
	}

	@Override
	public void apply(Switch s) {
		s.case${alternative.javaMethodName}(this);
	}

	@Override
	public <I, O, X extends Exception> O apply(Visitor<I, O, X> v, I input) throws X {
		return v.visit${alternative.javaMethodName}(this, input);
	}

	@Override
	protected void toStringBuilderDefault(StringBuilder buf) {
#foreach ($element in $alternative.elements)
		toStringBuilder(buf, get${element.javaMethodName}());
#end
	}
}
