/* ${header} */
package ${grammar.package.packageName}.analysis;

import java.util.Collection;
import java.util.Map;
import java.util.WeakHashMap;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import ${grammar.package.packageName}.node.*;

/**
 * A default implementation of the {@link Analysis} interface.
 *
 * You may prefer to use {@link VisitorAdapter} for new code,
 * as it has the ability to pass and return state on the stack, rather
 * than using a separate state store.
 */
public class AnalysisAdapter implements Analysis {

	@CheckForNull
	private Map<Node,Object> in;
	@CheckForNull
	private Map<Node,Object> out;

	@Override
	public Object getIn(Node node) {
		if (this.in == null)
			return null;
		return this.in.get(node);
	}

	@Override
	public void setIn(Node node, Object o) {
		if (this.in == null) {
			 if (o == null)
				return;
			this.in = new WeakHashMap<Node,Object>();
		}

		if (o != null)
			this.in.put(node, o);
		else
			this.in.remove(node);
	}

	@Override
	public Object getOut(Node node) {
		if (this.out == null)
			return null;
		return this.out.get(node);
	}

	@Override
	public void setOut(Node node, Object o) {
		if (this.out == null) {
			if (o == null)
				return;
			this.out = new WeakHashMap<Node,Object>();
		}

		if (o != null)
			this.out.put(node, o);
		else
			this.out.remove(node);
	}

#foreach ($parserMachine in $parserMachines)
	@Override
	public void case${parserMachine.startClassName}(${parserMachine.startClassName} node) {
		defaultCase(node);
	}

#end
#foreach ($token in $grammar.tokens)
	@Override
	public void case${token.javaMethodName}(@Nonnull ${token.javaTypeName} node) {
		defaultCase(node);
	}

#end
#foreach ($production in $grammar.astProductions)
#foreach ($alternative in $production.alternatives)
	@Override
	public void case${alternative.javaMethodName}(@Nonnull ${alternative.javaTypeName} node) {
		defaultCase(node);
	}

#end
#end

	@Override
	public void caseEOF(EOF node) {
		defaultCase(node);
	}

	@Override
	public void caseInvalidToken(InvalidToken node) {
		defaultCase(node);
	}

	public void defaultCase(Node node) {
	}

	/** Equivalent to node.apply(this) with safety against nulls. */
	public void applyTo(@CheckForNull Switchable node) {
		if (node == null)
			return;
		node.apply(this);
	}

	/** Equivalent to for (node in nodes) node.apply(this) with safety against nulls. */
	public void applyTo(@CheckForNull Iterable<? extends Switchable> nodes) {
		if (nodes == null)
			return;
		for (Switchable node : nodes)
			applyTo(node);
	}

	/** Equivalent to for (node in nodes.toArray()) node.apply(this) with safety against nulls and concurrent mutation. */
	public void applyToCopyOf(@CheckForNull Collection<? extends Switchable> nodes) {
		if (nodes == null)
			return;
		for (Switchable node : nodes.toArray(Switchable.EMPTY_ARRAY))
			applyTo(node);
	}

	/** Backwards iterating version of applyToCopyOf. */
	public void applyToCopyOfReversed(@CheckForNull Collection<? extends Switchable> nodes) {
		if (nodes == null)
			return;
		Switchable[] copy = nodes.toArray(Switchable.EMPTY_ARRAY);
		for (int i = copy.length - 1; i >= 0; i--)
			applyTo(copy[i]);
	}

}
