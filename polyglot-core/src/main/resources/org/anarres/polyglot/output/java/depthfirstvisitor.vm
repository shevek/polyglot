/* ${header} */
package ${grammar.package.packageName}.analysis;

import java.util.ArrayList;
import java.util.List;
import javax.annotation.Nonnull;
import ${grammar.package.packageName}.node.*;

/**
 * A {@link Visitor} which walks the tree depth first, in a left-to-right manner.
 *
 * @param <I> The type of the auxiliary argument to the visitor methods; use Void and pass null if not required.
 * @param <O> The return type of the visitor methods; use Void and return null if not required.
 * @param <X> The common supertype of checked exceptions thrown by the visitor methods; use RuntimeException if not required.
 *
 * @see VisitorAdapter
 * @see AbstractVisitorAdapter
 * @see TreeVisitorAdapter
 * @see DepthFirstAdapter
 */
public class DepthFirstVisitor<I, O, X extends Exception> extends TreeVisitorAdapter<I, O, X> {

    @Override
    public O visitStart(Start node, I input) throws X {
        inStart(node, input);
        applyTo(node.get${grammar.astProductionRoot.javaMethodName}(), input);
        applyTo(node.getEOF(), input);
        return outStart(node, input);
    }

#foreach ($production in $grammar.astProductions)
    // Production: $production
#foreach ($alternative in $production.alternatives)
    // Alternative: $alternative
    @Override
    public O visit${alternative.javaMethodName}(${alternative.javaTypeName} node, I input) throws X {
        in${alternative.javaMethodName}(node, input);

#foreach ($element in $alternative.elements)
#if ($element.list)
        {
            ${element.javaTypeName}[] copy = node.get${element.javaMethodName}().toArray(${element.javaTypeName}.EMPTY_ARRAY);
            for (${element.javaTypeName} e : copy)
                applyTo(e, input);
        }
#else##list
        applyTo(node.get${element.javaMethodName}(), input);
#end##list
#end##foreach element

#if (!$alternative.externals.empty)
        // Externals are emitted in order of definition, but universally after elements.
        inExternals(node, input, $alternative.externals.size());
#foreach ($external in $alternative.externals)
        visitExternal${alternative.javaMethodName}${external.javaMethodName}(node, input, node.#if($external.symbol.primitiveBoolean)is#{else}get#{end}${external.javaMethodName}());
#end##foreach alternative.externals
        outExternals(node, input, $alternative.externals.size());
#end

        return out${alternative.javaMethodName}(node, input);
    }

#end
#end

}
