/* ${header} */
package ${grammar.package.packageName}.analysis;

import java.util.ArrayList;
import java.util.List;
import javax.annotation.Nonnull;
import ${grammar.package.packageName}.node.*;

/**
 * A {@link Visitor} which walks the tree depth first, in a left-to-right manner.
 *
 * @param <I> The type of the auxiliary argument to the visitor methods; use Void and pass null if not required.
 * @param <O> The return type of the visitor methods; use Void and return null if not required.
 * @param <X> The common supertype of checked exceptions thrown by the visitor methods; use RuntimeException if not required.
 *
 * @see VisitorAdapter
 * @see AbstractVisitorAdapter
 * @see TreeVisitorAdapter
 * @see DepthFirstAdapter
 */
public class DepthFirstVisitor<I, O, X extends Exception> extends TreeVisitorAdapter<I, O, X> {

#foreach ($parserMachine in $parserMachines)
	@Override
	public O visit${parserMachine.startClassName}(${parserMachine.startClassName} node, I input) throws X {
		in${parserMachine.startClassName}(node, input);
		applyTo(node.get${parserMachine.astProductionRoot.javaMethodName}(), input);
		applyTo(node.getEOF(), input);
		return out${parserMachine.startClassName}(node, input);
	}

#end
#foreach ($production in $grammar.astProductions)
	// Production: $production
#foreach ($alternative in $production.alternatives)
	// Alternative: $alternative
	@Override
	public O visit${alternative.javaMethodName}(${alternative.javaTypeName} node, I input) throws X {
		in${alternative.javaMethodName}(node, input);

#if (!$alternative.externals.empty)
		// Externals are emitted in order of definition
		inExternals(node, input, $alternative.externals.size());
#foreach ($external in $alternative.externals)
		visitExternal${alternative.javaMethodName}${external.javaMethodName}(node, input, node.get${external.javaMethodName}());
#end##foreach alternative.externals
		outExternals(node, input, $alternative.externals.size());
#end

#foreach ($element in $alternative.elements)
#if ($element.list)
		voidApplyToCopyOf(node.get${element.javaMethodName}(), input);
#else##list
		applyTo(node.get${element.javaMethodName}(), input);
#end##list
#end##foreach element

		return out${alternative.javaMethodName}(node, input);
	}

#end
#end

}
