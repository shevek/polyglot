Package org.anarres.polyglot;

Helpers

/* These are character sets and regular expressions used in the
	definition of tokens. */

	all = [0 .. 0xFFFF];
	lowercase = ['a' .. 'z'];
	uppercase = ['A' .. 'Z'];
	nondigit = ['_' + [lowercase + uppercase]];
	digit = ['0' .. '9'];
	hex_digit = [digit + [['a' .. 'f'] + ['A' .. 'F']]];

	tab = 0x0009;
	lf  = 0x000a;
	ff  = 0x000c;
	cr  = 0x000d;
	eol = lf | cr | cr lf;
	not_eol = [all - [cr + lf]];

	not_star = [all - '*'];
	not_star_slash = [not_star - '/'];

	blank = (eol | tab | ' ')+ ;

	// simple_escape_seq = '\\\'' | '\\"' | '\\?' | '\\\\' | '\\a' | '\\b' | '\\f' | '\\n' | '\\r' | '\\t' | '\\v';
	// octal_escape_seq = '\\' octal_digit octal_digit? octal_digit?;
	// hex_escape_seq = '\\x' hex_digit+;
	escape_seq = '\' all ;
			// simple_escape_seq |
			// octal_escape_seq |
			// hex_escape_seq ;
			// universal_char_name;

	s_char = [all - [''' + ['\' + [cr + lf]]]] | escape_seq;

Tokens

	kw_abstract    = 'Abstract';
	kw_externals   = 'Externals';
	kw_helpers     = 'Helpers';
	kw_ignored     = 'Ignored';
	kw_new         = 'New';
	kw_null        = 'Null';
	kw_package     = 'Package';
	kw_precedences = 'Precedences';
	kw_productions = 'Productions';
	kw_states      = 'States';
	kw_syntax      = 'Syntax';
	kw_tokens      = 'Tokens';
	kw_tree        = 'Tree';

	token_specifier      = 'T';
	production_specifier = 'P';
	external_specifier   = 'E';

	tok_arrow    = '->';
	tok_at       = '@';
	tok_bar      = '|';
	tok_colon    = ':';
	tok_comma    = ',';
	tok_dot      = '.';
	tok_dotdot   = '..';
	tok_eq       = '=';
	tok_gt       = '>';
	tok_lbrace   = '{';
	tok_lpar     = '(';
	tok_lsquare  = '[';
	tok_minus    = '-';
	tok_plus     = '+';
	tok_question = '?';
	tok_rbrace   = '}';
	tok_rpar     = ')';
	tok_rsquare  = ']';
	tok_semi     = ';';
	tok_slash    = '/';
	tok_star     = '*';

	identifier = nondigit (nondigit | digit)* ;

	// char = '\'' not_eol '\'';
	dec_char = digit+;
	hex_char = '0' ('x' | 'X') hex_digit+;

	string = ''' s_char* ''';
	custom_name = '`' nondigit (nondigit | digit)* '`' ;

	blank = (eol | tab | ' ')+ ;
	javadoc_comment = '/**' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';
	c_comment = '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';
	cpp_comment = '//' not_eol* eol ;

Ignored Tokens

	blank,
	c_comment,
	cpp_comment;

Productions

	grammar =
		package section*
			{ -> New grammar(package, [section]) } ;

	section { -> section } =
		{helpers}        helpers        { -> helpers.section } |
		{states}         states         { -> states.section } |
		{tokens}         tokens         { -> tokens.section } |
		{ignored_tokens} ignored_tokens { -> ignored_tokens.section } |
		{externals}      externals      { -> externals.section } |
		{precedence}     precedences    { -> precedences.section } |
		{productions}    productions    { -> productions.section } |
		{ast}            ast            { -> ast.section } ;

	package { -> package } =
		javadoc_comment?
		kw_package qualified_name tok_semi
			{ -> New package(javadoc_comment, [qualified_name.identifier], kw_package) };

	qualified_name { -> identifier* } =
		{single} identifier
			{ -> [identifier] } |
		{list} qualified_name tok_dot identifier
			{ -> [qualified_name.identifier, identifier] } ;

	externals { -> section } =
		kw_externals [externals]:external*
			{ -> New section.externals([externals]) } ;

	external =
		javadoc_comment?
		annotation* identifier tok_eq string tok_semi
			{ -> New external(javadoc_comment, identifier, string, [annotation.annotation]) } ;

	precedences { -> section } =
		kw_precedences precedence_chain+
			{ -> New section.precedences([precedence_chain]) } ;

	precedence_chain =
		[list]:precedence_item_list tok_semi
			{ -> New precedence_chain([list]) } ;

	precedence_item_list { -> identifier* } =
		{empty}
			{ -> [] } |
		{single} [item]:precedence_item
			{ -> [item] } |
		{list} [head]:precedence_item_list tok_gt [tail]:precedence_item
			{ -> [head, tail] } ;

	precedence_item { -> identifier } =
		javadoc_comment? identifier
			{ -> identifier } ;

	helpers { -> section } =
		kw_helpers [helpers]:helper*
			{ -> New section.helpers([helpers]) };

	helper =
		javadoc_comment?
		annotation*
		identifier tok_eq matcher tok_semi
			{ -> New helper(javadoc_comment, identifier, matcher, [annotation]) };

	states { -> section } =
		kw_states identifier_list tok_semi
			{ -> New section.states([identifier_list.identifier]) };

	tokens { -> section } =
		kw_tokens [tokens]:token*
			{ -> New section.tokens([tokens]) };

	token =
		javadoc_comment?
		annotation* token_states? identifier tok_eq matcher tok_semi
			{ -> New token(javadoc_comment, [token_states.token_state], identifier, matcher, [annotation.annotation]) };

	token_states { -> token_state* } =
		tok_lbrace token_state_list tok_rbrace
			{ -> [token_state_list.token_state] } ;

	token_state_list { -> token_state* } =
		{single} token_state
			{ -> [token_state.token_state] } |
		{list} token_state_list tok_comma token_state
			{ -> [token_state_list.token_state, token_state.token_state] } ;

	token_state =
		{simple} [state]:identifier
			{ -> New token_state(state, Null) } |
		{transition} [state]:identifier tok_arrow [transition]:identifier
			{ -> New token_state(state, transition) } ;

	ignored_tokens { -> section } =
		kw_ignored kw_tokens identifier_list? tok_semi
			{ -> New section.ignored_tokens([identifier_list.identifier]) };

	/** This production avoids generating an alternate of length 1. */
	matcher { -> matcher } =
		{single} concat_matcher
			{ -> concat_matcher.matcher } |
		{list} [head]:concat_matcher [tail]:alternate_matcher+
			{ -> New matcher.alternate([head.matcher, tail.matcher]) } ;

	alternate_matcher { -> matcher } =
		tok_bar concat_matcher
			{ -> concat_matcher.matcher } ;

	/** This production avoids generating a concat of length 1. */
	concat_matcher { -> matcher } =
		{empty}
			{ -> New matcher.concat([]) } |
		{single} unary_matcher
			{ -> unary_matcher.matcher } |
		{list} [head]:unary_matcher [tail]:unary_matcher+
			{ -> New matcher.concat([head.matcher, tail.matcher]) } ;

	unary_matcher { -> matcher } =
		{simple} atomic_matcher
			{ -> atomic_matcher.matcher } |
		{star} atomic_matcher tok_star
			{ -> New matcher.star(atomic_matcher.matcher, tok_star) } |
		{question} atomic_matcher tok_question
			{ -> New matcher.question(atomic_matcher.matcher, tok_question) } |
		{plus} atomic_matcher tok_plus
			{ -> New matcher.plus(atomic_matcher.matcher, tok_plus) } ;

	atomic_matcher { -> matcher } =
		{char} charset_matcher
			{ -> charset_matcher.matcher } |
		{wrapped} tok_lpar matcher tok_rpar
			{ -> matcher.matcher } ;
		// {string} string { -> New matcher.string(string) } ;

	charset_matcher { -> matcher } =
		{expression} tok_lsquare charset_expression_matcher tok_rsquare
			{ -> charset_expression_matcher.matcher } |
		{interval} tok_lsquare [left]:char_matcher tok_dotdot [right]:char_matcher tok_rsquare
			{ -> New matcher.interval(left.literal, right.literal, tok_dotdot) } |
		{char} char_matcher
			{ -> New matcher.literal(char_matcher.literal) } |
		// A helper might name an NFA or a CharSet.
		{helper} identifier
			{ -> New matcher.helper(identifier) } |
		{custom} custom_name
			{ -> New matcher.custom(custom_name) } ;

	charset_expression_matcher { -> matcher } =
		{simple} charset_matcher
			{ -> charset_matcher.matcher } |
		{union} [left]:charset_expression_matcher tok_plus [right]:charset_matcher
			{ -> New matcher.union(left.matcher, right.matcher, tok_plus) } |
		{difference} [left]:charset_expression_matcher tok_minus [right]:charset_matcher
			{ -> New matcher.difference(left.matcher, right.matcher, tok_minus) } ;

	char_matcher { -> literal } =
		{string} string
			{ -> New literal.string(string) } |
		{dec} dec_char
			{ -> New literal.dec_char(dec_char) } |
		{hex} hex_char
			{ -> New literal.hex_char(hex_char) } ;

	un_op =
		{star} tok_star
			{ -> New un_op.star(tok_star) } |
		{question} tok_question
			{ -> New un_op.question(tok_question) } |
		{plus} tok_plus
			{ -> New un_op.plus(tok_plus) } ;

	productions { -> section } =
		kw_productions [prods]:cst_production*
			{ -> New section.productions([prods]) };

	cst_production =
		javadoc_comment?
		annotation*
		identifier cst_production_transform? tok_eq cst_alternative_list tok_semi
			{ -> New cst_production(
				javadoc_comment, identifier,
				cst_production_transform.tok_arrow,
				[cst_production_transform.element],
				[cst_alternative_list.cst_alternative],
				[annotation]) };

	cst_production_transform { -> tok_arrow element* } =
		tok_lbrace tok_arrow [elements]:element* tok_rbrace
			{ -> tok_arrow [elements] } ;

	cst_alternative_list { -> cst_alternative* } =
		{single} cst_alternative
			{ -> [cst_alternative] } |
		{list} cst_alternative_list tok_bar cst_alternative
			{ -> [cst_alternative_list.cst_alternative, cst_alternative] } ;

	cst_alternative =
		{anonymous}
			[elements]:element* cst_transform?
				{ -> New cst_alternative(
					Null, Null,
					[elements],
					cst_transform.tok_arrow,
					[cst_transform.expression],
					[]) } |
		{named}
			javadoc_comment?
			annotation*
			alt_name [elements]:element* cst_transform?
				{ -> New cst_alternative(
					javadoc_comment, alt_name.identifier,
					[elements],
					cst_transform.tok_arrow,
					[cst_transform.expression],
					[annotation]) } ;

	cst_transform { -> tok_arrow expression* } =
		tok_lbrace tok_arrow [terms]:expression* tok_rbrace
			{ -> tok_arrow [terms] } ;

	expression { -> expression } =
		{list} tok_lsquare expression_list? tok_rsquare
			{ -> New expression.list([expression_list.expression], tok_lsquare) } |
		{new} kw_new identifier transform_specifier? tok_lpar [arguments]:expression_list/*_trailing*/? tok_rpar
			{ -> New expression.new(identifier, transform_specifier.identifier, [arguments.expression], kw_new) } |
		{reference} /* specifier? */ identifier transform_specifier?
			{ -> New expression.reference(/* specifier, */ identifier, transform_specifier.identifier) } |
		{null} kw_null
			{ -> New expression.null(kw_null) } ;

	expression_list_trailing { -> expression* } =
		expression_list tok_comma?
			{ -> [expression_list.expression] } ;

	expression_list { -> expression* } =
		{single} expression
			{ -> [expression.expression] } |
		{list} expression_list tok_comma expression
			{ -> [expression_list.expression, expression.expression] } ;

	ast { -> section } =
		kw_abstract kw_syntax kw_tree [productions]:ast_production*
			{ -> New section.ast([productions]) };

	ast_production =
		javadoc_comment?
		annotation*
		identifier tok_eq ast_alternative_list tok_semi
			{ -> New ast_production(
				javadoc_comment, identifier,
				[ast_alternative_list.ast_alternative],
				[annotation]) };

	ast_alternative_list { -> ast_alternative* } =
		{single} ast_alternative
			{ -> [ast_alternative] } |
		{list} ast_alternative_list tok_bar ast_alternative
			{ -> [ast_alternative_list.ast_alternative, ast_alternative] } ;

	ast_alternative =
		/**
		 * If we don't split this, we get a R/R conflict because
		 * the javadoc_comment or annotations might refer to the element.
		 */
		{anonymous}
			[elements]:element*
				{ -> New ast_alternative(Null, Null, [elements], []) } |
		{named}
			javadoc_comment?
			annotation*
			alt_name [elements]:element*
				{ -> New ast_alternative(javadoc_comment, alt_name.identifier, [elements], [annotation]) } ;

	element =
		javadoc_comment?
		annotation*
		element_name? specifier? identifier un_op?
			{ -> New element(javadoc_comment, element_name.identifier, specifier, identifier, un_op, [annotation]) };



	/** Generic. */
	transform_specifier { -> identifier } =
		tok_dot identifier
			{ -> identifier } ;

	/** Generic. */
	alt_name { -> identifier } =
		tok_lbrace identifier tok_rbrace
			{ -> identifier };

	/** Generic. */
	element_name { -> identifier } =
		tok_lsquare identifier tok_rsquare tok_colon
			{ -> identifier };

	/** Generic. */
	specifier =
		{token} token_specifier tok_dot
			{ -> New specifier.token(token_specifier) } |
		{production} production_specifier tok_dot
			{ -> New specifier.production(production_specifier) } |
		{external} external_specifier tok_dot
			{ -> New specifier.external(external_specifier) } ;

	/** Generic. */
	identifier_list { -> identifier* } =
		{single} identifier
			{ -> [identifier] } |
		{list} identifier_list tok_comma identifier
			{ -> [identifier_list.identifier, identifier] } ;

	/** Generic. */
	annotation =
		tok_at identifier annotation_value?
			{ -> New annotation(identifier, annotation_value) } ;

	/** Generic. */
	annotation_value { -> string? } =
		tok_lpar string? tok_rpar
			{ -> string } ;

Abstract Syntax Tree

	grammar =
		package
		[sections]:section*
		;

	package =
		javadoc_comment?
		[name]:identifier*
		[location]:kw_package ;

	section =
		{helpers}        [helpers]:helper* |
		{externals}      [externals]:external* |
		{states}         [names]:identifier* |
		{tokens}         [tokens]:token* |
		{ignored_tokens} [names]:identifier* |
		{precedences}    [chains]:precedence_chain* |
		{productions}    [productions]:cst_production* |
		{ast}            [productions]:ast_production* ;

	precedence_chain =
		[identifiers]:identifier*
		;

	external =
		javadoc_comment?
		[name]:identifier
		[external_type]:string
		[annotations]:annotation*
		;

	helper =
		javadoc_comment?
		[name]:identifier matcher
		[annotations]:annotation* ;

	token =
		javadoc_comment?
		[token_states]:token_state*
		[name]:identifier matcher
		[annotations]:annotation*
		;

	token_state = [state]:identifier [transition]:identifier? ;

	matcher =
		// NFA constructs
		{alternate}  [matchers]:matcher* |
		{concat}     [matchers]:matcher* |
		// NFA operations
		{star}       matcher [op]:tok_star |
		{question}   matcher [op]:tok_question |
		{plus}       matcher [op]:tok_plus |
		// NFA atomics
		// {string}     string |
		// Either an NFA or a CharSet
		{helper}     [helper_name]:identifier |
		// Kind of like a literal, in that it just consumes characters.
		{custom}     custom_name |
		// CharSet operations
		{union}      [left]:matcher [right]:matcher [op]:tok_plus  |
		{difference} [left]:matcher [right]:matcher [op]:tok_minus |
		{interval}   [left]:literal [right]:literal [op]:tok_dotdot |
		// Characters
		{literal}    literal;

	literal =
		{string}   [token]:string |
		{dec_char} [token]:dec_char |
		{hex_char} [token]:hex_char ;

	un_op =
		{star}     tok_star 	|
		{question} tok_question |
		{plus}     tok_plus	;

	cst_production =
		javadoc_comment?
		[name]:identifier
		[transform_sentinel]:tok_arrow?
		[transform]:element*
		[alternatives]:cst_alternative*
		[annotations]:annotation*
		;

	cst_alternative =
		javadoc_comment?
		[name]:identifier?
		[elements]:element*
		[transform_sentinel]:tok_arrow?
		[transform]:expression*
		[annotations]:annotation*
		;

	expression =
		{new} [production_name]:identifier [alternative_name]:identifier? [arguments]:expression* [location]:kw_new |
		{list} [items]:expression* [location]:tok_lsquare |
		{reference} /* specifier? */ [element_name]:identifier [transform_name]:identifier? |
		{null} [location]:kw_null ;

	specifier =
		{token} token_specifier |
		{production} production_specifier |
		{external} external_specifier ;

	ast_production =
		javadoc_comment?
		[name]:identifier
		[alternatives]:ast_alternative*
		[annotations]:annotation*
		;

	ast_alternative =
		javadoc_comment?
		[name]:identifier?
		[elements]:element*
		[annotations]:annotation*
		;

	element =
		javadoc_comment?
		[name]:identifier?
		specifier?
		/** Refers to the name of an AST production. */
		[symbol_name]:identifier
		un_op?
		[annotations]:annotation*
		;

	annotation =
		[name]:identifier [value]:string? ;

